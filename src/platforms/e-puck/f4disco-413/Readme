Specific to the e-puk2 mobile robot:

This platform use an F4Discovery board modified: The F103 programmer is replaced
by an F413. The F407 is a target, usable like in ST_LINK usage.
The platform is based on e-puck2, using F413 too.

System vs BMP Bootloader
========================
We use the STM32F413 internal DFU bootloader and there is no code to provide and
no control too except the Boot0 pin of the F413.

Connections:
====================

> Boot0: Pin Boot0 to force system bootloader entry AFTER reset.
The e-puck2 must be OFF and the Boot0 jumper short-circuited then the USB must
be connected to a PC with DFU util tools in order to reprogram the BlackMagic
Probe firmware.

Not implemented yet but could be done later:
1. An eventual Black Magic UART Port: That's need an UART connection (2 pins)
between the 2 uCs and it will allow to implement a virtual UART console via USB
between the 407 and the USB host.
2. An eventual Black Magic Trace Capture: That's need 1 link between the 2 uCs
(SWO on the 407)

> PB14: TMS/SWDIO
> PB13: TCK/SWCLK
> PA10: TDO/TRACESWO - if needed but try to avoid to use it, that's the case yet

> PB0: SRST - RESET of STM32F407

> PC13/Red Led:  Error indicator
> PC14/Green Led: Idle/Run indicator

Power management. For the moment just force ON after a reset if the Power ON
button is pressed. The switch OFF is implemented by GDB dedicated function.
> PA6: PWR_ON output at "1" in order to maintain the system's power supply.
> PA7: PWR_ON_BTN input. Can be use to be sure that the power supply ON is
       well requested from the ON/OFF button. And by software can be used to
       switch OFF too the system.

USB connection detection.
> PA9: VBUS

USART interface with the F407 enabled if NO_SERIAL = 0 in Makefile.inc
> PA2: USART-TX connected to RXD_ESP32
> PA3: USART-RX connected to TXD_ESP32

GDB dedicated functions :
=================================
Use "mon help" to list the dedicated function for the platform
New and specific functions are added via platform_commands.h file.

3) <vbus> to read the state of VBus input

ToDo :
====================
